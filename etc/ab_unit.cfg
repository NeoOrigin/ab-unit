#!/bin/ksh
#===============================================================================
#
#          FILE:  ab_unit.cfg
# 
#         USAGE:  . ${AB_UNIT_HOME}/etc/ab_unit.cfg
# 
#   DESCRIPTION:  This script sets up the configuration variables required to
#                 control the ab_unit runtime
# 
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Philip Bowditch
#       COMPANY:  
#       VERSION:  1.0
#       CREATED:  19/09/2008 18:36:49 GMT Daylight Time
#      REVISION:  ---
#
#===============================================================================

export AB_UNIT_NICE=${AB_UNIT_NICE:-0}                                                # The nice priority value for scheduling jobs
#: ${AB_UNIT_ULIMIT:="vmemory=unlimited data=unlimited"}                              # The ulimit settings for each process

export AB_UNIT_MAX_TEST_PARALLEL=${AB_UNIT_MAX_TEST_PARALLEL:-1}                      # The maximum number of parallel tests to run per user
export AB_UNIT_MAX_SUITE_PARALLEL=${AB_UNIT_MAX_SUITE_PARALLEL:-1}                    # The maximum number of parallel tests to run per user

export AB_UNIT_MESSAGE_FILTER=${AB_UNIT_MESSAGE_FILTER:-""}                           # A program/function to filter messages as they are generated
export AB_UNIT_MESSAGE_BUFFER=${AB_UNIT_MESSAGE_BUFFER:-500}                          # Line buffer used to hold messages between processes

export AB_UNIT_OUTPUT_STREAMS=${AB_UNIT_OUTPUT_STREAMS:-"stderr"}                     # Display stderr, stdout, none, merged or split

export AB_UNIT_START_TEST_EVENT=${AB_UNIT_START_TEST_EVENT:-"on_start_test"}          # Event to perform when a test starts
export AB_UNIT_END_TEST_EVENT=${AB_UNIT_END_TEST_EVENT:-"on_end_test"}                # Event to perform when a test ends
export AB_UNIT_START_SUITE_EVENT=${AB_UNIT_START_SUITE_EVENT:-""}                     # Event to perform when a suite starts
export AB_UNIT_END_SUITE_EVENT=${AB_UNIT_END_SUITE_EVENT:-""}                         # Event to perform when a suite ends
export AB_UNIT_START_RUN_EVENT=${AB_UNIT_START_RUN_EVENT:-""}                         # Event to perform when run starts
export AB_UNIT_END_RUN_EVENT=${AB_UNIT_END_RUN_EVENT:-""}                             # Event to perform when run ends

export AB_UNIT_TEST_FUNC_REGX=${AB_UNIT_TEST_FUNC_REGX:-"^test_"}                     # The regular expression matching test functions
export AB_UNIT_TEST_SUITE_REGX=${AB_UNIT_TEST_SUITE_REGX:-"test_*"}                   # The regular expression matching test suites
export AB_UNIT_FUNC_REGX=${AB_UNIT_FUNC_REGX:-"^function "}                           # Regular expression used to find script function definitions
export AB_UNIT_SETUP_REGX=${AB_UNIT_SETUP_REGX:-"^setup_test$"}                       # Regular expression used to find setup functions
export AB_UNIT_TEARDOWN_REGX=${AB_UNIT_TEARDOWN_REGX:-"^teardown_test$"}              # Regular expression used to find teardown functions
export AB_UNIT_SUITE_SETUP_REGX=${AB_UNIT_SUITE_SETUP_REGX:-"^setup_suite$"}          # Regular expression used to find suite setup functions
export AB_UNIT_SUITE_TEARDOWN_REGX=${AB_UNIT_SUITE_TEARDOWN_REGX:-"^teardown_suite$"} # Regular expression used to find suite teardown functions

export AB_UNIT_WORKING_AREA=${AB_UNIT_WORKING_AREA:-"/tmp"}                           # Temporary working area for
